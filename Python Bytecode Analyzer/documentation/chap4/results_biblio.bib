@inproceedings{bravenboer2009strictly,
  title={Strictly declarative specification of sophisticated points-to analyses},
  author={Bravenboer, Martin and Smaragdakis, Yannis},
  booktitle={Proceedings of the 24th ACM SIGPLAN conference on Object oriented programming systems languages and applications},
  pages={243--262},
  year={2009}
}

@incollection{vallee2010soot,
  title={Soot: A Java bytecode optimization framework},
  author={Vall{\'e}e-Rai, Raja and Co, Phong and Gagnon, Etienne and Hendren, Laurie and Lam, Patrick and Sundaresan, Vijay},
  booktitle={CASCON First Decade High Impact Papers},
  pages={214--224},
  year={2010}
}

@inproceedings{grech2019gigahorse,
  title={Gigahorse: thorough, declarative decompilation of smart contracts},
  author={Grech, Neville and Brent, Lexi and Scholz, Bernhard and Smaragdakis, Yannis},
  booktitle={2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)},
  pages={1176--1186},
  year={2019},
  organization={IEEE}
}

@article{brent2018vandal,
  title={Vandal: A scalable security analysis framework for smart contracts},
  author={Brent, Lexi and Jurisevic, Anton and Kong, Michael and Liu, Eric and Gauthier, Francois and Gramoli, Vincent and Holz, Ralph and Scholz, Bernhard},
  journal={arXiv preprint arXiv:1809.03981},
  year={2018}
}

@inproceedings{tillmann2008pex,
author = {Tillmann, Nikolai and de Halleux, Peli},
title = {Pex - White Box Test Generation for .NET},
series = {LNCS},
booktitle = {Proc. of Tests and Proofs (TAP'08)},
year = {2008},
month = {April},
abstract = {Pex automatically produces a small test suite with high code coverage for a .NET program. To this end, Pex performs a systematic program analysis (using dynamic symbolic execution, similar to path-bounded model-checking) to determine test inputs for Parameterized Unit Tests. Pex learns the program behavior by monitoring execution traces. Pex uses a constraint solver to produce new test inputs which exercise different program behavior. The result is an automatically generated small test suite which often achieves high code coverage. In one case study, we applied Pex to a core component of the .NET runtime which had already been extensively tested over several years. Pex found errors, including a serious issue.},
publisher = {Springer Verlag},
url = {https://www.microsoft.com/en-us/research/publication/pex-white-box-test-generation-for-net/},
pages = {134-153},
volume = {4966},
edition = {Proc. of Tests and Proofs (TAP'08)},
}

@inproceedings{wang2017angr,
  title={Angr-the next generation of binary analysis},
  author={Wang, Fish and Shoshitaishvili, Yan},
  booktitle={2017 IEEE Cybersecurity Development (SecDev)},
  pages={8--9},
  year={2017},
  organization={IEEE}
}

@inproceedings{mossberg2019manticore,
  title={Manticore: A user-friendly symbolic execution framework for binaries and smart contracts},
  author={Mossberg, Mark and Manzano, Felipe and Hennenfent, Eric and Groce, Alex and Grieco, Gustavo and Feist, Josselin and Brunson, Trent and Dinaburg, Artem},
  booktitle={2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  pages={1186--1189},
  year={2019},
  organization={IEEE}
}

@inproceedings{di2019survey,
  title={A survey of tools for analyzing ethereum smart contracts},
  author={Di Angelo, Monika and Salzer, Gernot},
  booktitle={2019 IEEE International Conference on Decentralized Applications and Infrastructures (DAPPCON)},
  pages={69--78},
  year={2019},
  organization={IEEE}
}