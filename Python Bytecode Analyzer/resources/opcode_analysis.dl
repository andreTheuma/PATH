//---------------------------------------------------------------------------------------//
// ** Type Setup ** //

// setting up types //
.type Statement <: symbol
.type Variable <: symbol
.type Address <: symbol
.type Code <: symbol

//---------------------------------------------------------------------------------------//
// ** Functor Definitions ** //

//  converts a hexadecimal number to a decimal number
// .functor hexa_to_number(symbol):number


//---------------------------------------------------------------------------------------//
// used to return the identifier //
.decl identifier_address(address: Statement)
identifier_address(address) :- identifier_address(address).

.decl opcode_value(instruction: Statement)
opcode_value(instruction) :- opcode_value(instruction).

//---------------------------------------------------------------------------------------//
// ** File Reading ** //

// reading the files //
.decl Statement_Pushes(address: Statement, n: number)
.input Statement_Pushes(IO = "file", filename = "StatementPushes.facts", delimeter="\t")

.decl Statement_Pops(address: Statement, n: number)
.input Statement_Pops(IO = "file", filename = "StatementPops.facts", delimeter="\t")

.decl Statement_Opcode(address: Statement, opcode: Statement)
.input Statement_Opcode(IO = "file", filename = "StatementOpcode.facts", delimeter="\t")

.decl Statement_Code(address: Statement, code: Statement)
.input Statement_Code(IO = "file", filename = "StatementCode.facts", delimeter="\t")

.decl Statement_Metadata(address: Statement, line_number: number)
.input Statement_Metadata(IO = "file", filename = "StatementMetadata.facts", delimeter="\t")

.decl Statement_Block(address: Statement, block_identifier: Statement)
.input Statement_Block(IO = "file", filename = "StatementBlock.facts", delimeter="\t")

.decl Statement_Block_Stack_Delta(address: Statement, delta: number)
.input Statement_Block_Stack_Delta(IO = "file", filename = "StatementStackDelta.facts", delimeter="\t")

.decl Statement_Pop_Delta(address: Statement, delta: number)
.input Statement_Pop_Delta(IO = "file", filename = "StatementPopDelta.facts", delimeter="\t")

.decl Statement_Defines_Local(address: Statement, address_variable: Statement)
.input Statement_Defines_Local(IO = "file", filename = "StatementDefinesLocal.facts", delimeter="\t")

.decl Statement_Uses_Local(address: Statement, address_using: Statement, arg_number:number)
.input Statement_Uses_Local(IO = "file", filename = "StatementUsesLocal.facts", delimeter="\t")

.decl Statement_Next(address: Statement, address_prev: Statement)
.input Statement_Next(IO = "file", filename = "StatementNext.facts", delimeter="\t")

.decl Statement_Block_Head(address: Statement, block_identifier:Statement)
.input Statement_Block_Head(IO = "file", filename = "StatementBlockHead.facts", delimeter="\t")

.decl Statement_Block_Tail(address: Statement, block_identifier:Statement)
.input Statement_Block_Tail(IO = "file", filename = "StatementBlockTail.facts", delimeter="\t")

//TODO: RENAME to Statement_Block_Pops
.decl Statement_Block_Pop_Delta(address: Statement, delta: number)
.input Statement_Block_Pop_Delta(IO = "file", filename = "TotalStatementPopDelta.facts", delimeter="\t")

.decl Block_To_Block(block_identifier_prev: Statement, block_identifier: Statement)
.input Block_To_Block(IO = "file", filename = "BlockToBlock.facts", delimeter="\t")

//TODO:
.decl Statement_Block_Stack_Size(address: Statement, size: number)
.input Statement_Block_Stack_Size(IO = "file", filename = "StatementBlockStackSize.facts", delimeter="\t")

//---------------------------------------------------------------------------------------//

//.decl Block_Output_Contents(block_identifier: Statement, outputs: number)

// n is the pop delta; m is the stack delta
//Block_Output_Contents(block_identifier, n+m):-
//    Statement_Block_Pop_Delta(instruction, n),
//    Statement_Block_Stack_Delta(instruction,m),
//    Statement_Block_Tail(instruction,block_identifier).

.decl Block_Output_Count(block_identifier:Statement, number_of_outputs:number)

Block_Output_Count(block_identifier, n):-
     Statement_Block_Tail(tail_instruction,block_identifier),
     Statement_Block_Stack_Size(tail_instruction,n).
     //Statement_Pop_Delta(tail_instruction,n),
     //Statement_Block_Stack_Delta(tail_instruction,m).

.decl Block_Input_Count(block_identifier:Statement, number_of_outputs:number)

Block_Input_Count(block_identifier,n):-
    Block_To_Block(prev_block_identifier,block_identifier),
    Block_Output_Count(prev_block_identifier,n).

.decl Block_Output_Contents(block_identifier:Statement, variable: Variable)

Block_Output_Contents(block_identifier,variable):-
    Statement_Block_Tail(tail_instruction,block_identifier),
    Statement_Block_Pop_Delta(tail_instruction)


//.type Variable <: Statement
// a statement can be a variable

//.decl BlockInputContents(block: Block, variable: Variable, n: Number)
//.decl BlockOutputContents(block: Block, variable: Variable, n: Number)

//BlockInputContents(block, variable, n) :-
//    Block_To_Block(prev, block),
//    BlockOutputContents(prev, variable, n).
// Case 1 - element from input has not been overwritten
//BlockOutputContents(block, variable, n_new) :-
//    Statement_Block_Tail(tail, block),
//    Statement_Block_Pop_Delta(tail, n_popped),
//    Statement_Block_Stack_Delta(tail, n_shifted),    
//    BlockInputContents(block, variable, n_notoverwritten),
//    n_notoverwritten > n_popped, // important condition
//    n_new = n_notoverwritten - n_shifted, // Maybe - ?
//   n_new > 0, n_new < 30. // sanity checking

// Case 2 - element from input emerges from this block
//BlockOutputContents(block, variable, n_new) :-
//    Statement_Block_Tail(tail, block),
//   Statement_Block_Pop_Delta(tail, n_popped),
//    Statement_Block_Stack_Delta(tail, n_shifted), 
//    LocalStackContents(tail, n_new, variable),
//   n_new < n_popped. // important condition

// LocalStackContents is a relation that gives you for any instruction, what the stack looks like in terms of instructions WITHIN the same block (see global.dl in gigahorse-toolchain)



//---------------------------------------------------------------------------------------//
// ** File Saving ** // 

//.output Block_Input_Contents(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/test_BLOCK_INPUT_CONTENTS.csv", delimeter="\t")
//.output Block_Output_Contents(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/test_BLOCK_OUTPUT_CONTENTS.csv", delimeter="\t")
.output Block_Input_Count(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/test_BLOCK_INPUT_COUNT.csv", delimeter="\t")
.output Block_Output_Count(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/test_BLOCK_OUTPUT_COUNT.csv", delimeter="\t")













































































//---------------------------------------------------------------------------------------//















































































// statements which have over 0 pushes in the block are the input contents of that block
/* .decl Block_Input_Statements(statement_address: Statement, block_address: Statement)
Block_Input_Statements(statement_address,block_address) :- 
    ((n>0) , Statement_Pushes(statement_address,n)),
    Statement_Block(statement_address,block_address).
    //Statement_Block_Head(statement_address,block_address).

.decl Block_Input_Contents(statement_address:Statement, block_address:Statement)
Block_Input_Contents(statement_address, block_address) :- 
Statement_Uses_Local(_,statement_address,_),
Block_Input_Statements(statement_address, block_address). */

//.decl Block_Converter(statement_address:Statement, block_address)
    
// statements which has over 0 pops in a block are the output contents of that block
/* .decl Block_Output_Statements(statement_address: Statement, block_address: Statement)
Block_Output_Statements(statement_address,block_address) :-
    ((n>0) , Statement_Pops(statement_address, n)),
    Statement_Block_Tail(statement_address,block_address).

.decl Block_Output_Contents(statement_address: Statement, block_address: Statement)
Block_Output_Contents(statement_address, block_address) :-
    Statement_Uses_Local(_,statement_address,_),
    Block_Output_Statements(statement_address, block_address). */
    

//---------------------------------------------------------------------------------------//






































//---------------------------------------------------------------------------------------//


























//.decl Statement_Next(address: Statement, opcode: Opcode)
//.input Statement_Next(IO = "file", filename = "StatementNext.facts", delimeter="\t")
/*
//---------------------------------------------------------------------------------------//
// ** Definitions ** //

//  Input file definitions //
Statement_Pushes(address, 1).
Statement_Pops(address, 1).
Statement_Opcode(address, opcode).
Statement_Metadata(address, line_number).

//  Checks if value is a variable
.decl Is_Variable(n: Variable)

//  Gives the statement number
.decl Statement_Number(statement: Statement, n: number)
Statement_Number(statement,)

//  Maps a statement to a variable
.decl Statement_Variable(statement: Statement, variable : Variable)



//---------------------------------------------------------------------------------------//
// ** Basic Block Methods ** //

//  Determines if statement is the start of a basic block
.decl Is_Start_Of_Block(address: Address)

Is_Start_Of_Block(address) :-
    Statement_Opcode(address,JUMP_ABSOLUTE(address)).




//---------------------------------------------------------------------------------------//
// ** Stack Methods ** //

//  Computes the delta of the current statement in the stack
.decl Statement_Stack_Delta(statement: Statement, n: number).


//.decl Stack_Contents(statement : Statement, index : StackIndex, variable : Variable)

//  content at the top of the stack -> BASE CASE
//Stack_Contents(statement,0, variable) :-
//    Statement_Variable(statement,variable).

//  
//Stack_Contents()

//Statement_Stack_Delta(statement, n) :-






//---------------------------------------------------------------------------------------//
// ** Opcode Setup** //

.decl JUMP_FORWARD(address: Address)
JUMP_FORWARD(address) :- Statement_Opcode(address, "JUMP_FORWARD").

.decl JUMP_ABSOLUTE(address: Address)
JUMP_ABSOLUTE(address) :- Statement_Opcode(address, "JUMP_ABSOLUTE").

.decl LOAD_CLOSURE(address: address)
LOAD_CLOSURE(address) :- Statement_Opcode(address, "LOAD_CLOSURE").

.decl BUILD_TUPLE(address: Address)
BUILD_TUPLE(address) :- Statement_Opcode(address, "BUILD_TUPLE").

.decl LOAD_FAST(address: Address)
LOAD_FAST(address) :- Statement_Opcode(address, "LOAD_FAST").

.decl LOAD_CONST(address: Address)
LOAD_CONST(address) :- Statement_Opcode(address, "LOAD_CONST").


//---------------------------------------------------------------------------------------//

// ** Query Methods ** //

.decl all_load_fast(address: Statement, opcode: Opcode)
all_load_fast(address, opcode) :- 
    Statement_Opcode(address,LOAD_CONST(address)).

//---------------------------------------------------------------------------------------//

/* 
// setting up opcodes //
.decl OpcodeIs_LOAD_CLOSURE(instruction: Opcode)
OpcodeIs_LOAD_CLOSURE(instruction) :- OpcodeIs_LOAD_CLOSURE(instruction).

.decl OpcodeIs_BUILD_TUPLE(instruction: Opcode)
OpcodeIs_BUILD_TUPLE(instruction) :- OpcodeIs_BUILD_TUPLE(instruction).

.decl OpcodeIs_LOAD_FAST(instruction: Opcode)
OpcodeIs_LOAD_FAST(instruction) :- OpcodeIs_LOAD_FAST(instruction).

.decl OpcodeIs_LOAD_CONST(instruction: Opcode)
OpcodeIs_LOAD_CONST(instruction) :- OpcodeIs_LOAD_CONST(instruction).

.decl OpcodeIs_BINARY_ADD(instruction: Opcode)
OpcodeIs_BINARY_ADD(instruction) :- OpcodeIs_BINARY_ADD(instruction).

.decl OpcodeIs_RETURN_VALUE(instruction: Opcode)
OpcodeIs_RETURN_VALUE(instruction) :- OpcodeIs_RETURN_VALUE(instruction).

.decl OpcodeIs_STORE_FAST(instruction: Opcode)
OpcodeIs_STORE_FAST(instruction) :- OpcodeIs_STORE_FAST(instruction).

.decl OpcodeIs_MAKE_FUNCTION(instruction: Opcode)
OpcodeIs_MAKE_FUNCTION(instruction) :- OpcodeIs_MAKE_FUNCTION(instruction).

.decl OpcodeIs_LOAD_DEREF(instruction: Opcode)
OpcodeIs_LOAD_DEREF(instruction) :- OpcodeIs_LOAD_DEREF(instruction).

.decl OpcodeIs_INPLACE_ADD(instruction: Opcode)
OpcodeIs_INPLACE_ADD(instruction) :- OpcodeIs_INPLACE_ADD(instruction).

.decl OpcodeIs_STORE_DEREF(instruction: Opcode)
OpcodeIs_STORE_DEREF(instruction) :- OpcodeIs_STORE_DEREF(instruction).

.decl OpcodeIs_CALL_FUNCTION(instruction: Opcode)
OpcodeIs_CALL_FUNCTION(instruction) :- OpcodeIs_CALL_FUNCTION(instruction).

.decl OpcodeIs_STORE_NAME(instruction: Opcode)
OpcodeIs_STORE_NAME(instruction) :- OpcodeIs_STORE_NAME(instruction).

.decl OpcodeIs_LOAD_BUILD_CLASS(instruction: Opcode)
OpcodeIs_LOAD_BUILD_CLASS(instruction) :- OpcodeIs_LOAD_BUILD_CLASS(instruction).

.decl OpcodeIs_LOAD_NAME(instruction: Opcode)
OpcodeIs_LOAD_NAME(instruction) :- OpcodeIs_LOAD_NAME(instruction).

//---------------------------------------------------------------------------------------//
// pushing values to decls //
OpcodeIs_LOAD_CLOSURE("LOAD_CLOSURE").

OpcodeIs_BUILD_TUPLE("BUILD_TUPLE").

OpcodeIs_LOAD_FAST("LOAD_FAST").

OpcodeIs_LOAD_CONST("LOAD_CONST").

OpcodeIs_BINARY_ADD("BINARY_ADD").

OpcodeIs_RETURN_VALUE("RETURN_VALUE").

OpcodeIs_STORE_FAST("STORE_FAST").

OpcodeIs_MAKE_FUNCTION("MAKE_FUNCTION").

OpcodeIs_LOAD_DEREF("LOAD_DEREF").

OpcodeIs_INPLACE_ADD("INPLACE_ADD").

OpcodeIs_STORE_DEREF("STORE_DEREF").

OpcodeIs_CALL_FUNCTION("CALL_FUNCTION").

OpcodeIs_LOAD_BUILD_CLASS("LOAD_BUILD_CLASS").

OpcodeIs_LOAD_NAME("LOAD_NAME").
//---------------------------------------------------------------------------------------//




.decl Data(address:Statement)
Data(address) :- 
    identifier_address(address).
.input Data(IO = "file", filename = "StatementOpcode.facts", delimeter="\t")
 */
//---------------------------------------------------------------------------------------//
// analysis functions //
/*
.decl counter_load_closure(address: Statement, opcode: Opcode)
counter_load_closure(address, opcode) :- 
            Statement_Opcode(address, opcode),
            OpcodeIs_LOAD_CLOSURE(opcode).

.decl counter_build_tuple(address: Statement, opcode: Opcode)
counter_build_tuple(address, opcode) :- 
            Statement_Opcode(address, opcode),
            OpcodeIs_BUILD_TUPLE(opcode).

.decl counter_load_fast(address: Statement, opcode: Opcode)
counter_load_fast(address, opcode) :- 
            Statement_Opcode(address, opcode),
            OpcodeIs_LOAD_FAST(opcode).

.decl counter_load_const(address: Statement, opcode: Opcode)
counter_load_const(address, opcode) :- 
            Statement_Opcode(address, opcode),
            OpcodeIs_LOAD_CONST(opcode).

.decl counter_binary_add(address: Statement, opcode: Opcode)
counter_binary_add(address, opcode) :- 
            Statement_Opcode(address, opcode),
            OpcodeIs_BINARY_ADD(opcode).

.decl counter_return_value(address:Statement, opcode:Opcode)
counter_return_value(address, opcode) :-
            Statement_Opcode(address,opcode),
            OpcodeIs_RETURN_VALUE(opcode).



.decl address_example(address:Statement)
address_example(address) :- address_example(address).
address_example("<md5 _hashlib.HASH object @ 0x1040b2050>").

// removes the opcode component for the address
.decl empty_string_for_opcode(string:Opcode)
empty_string_for_opcode(string) :- empty_string_for_opcode(string).
empty_string_for_opcode("").

.decl get_address_from_return_opcode(address:Statement,opcode:Opcode)
get_address_from_return_opcode(address,opcode):-
            //OpcodeIs_RETURN_VALUE(opcode),
            counter_return_value(address, _),
            empty_string_for_opcode(opcode).



.decl counter_store_fast(address: Statement, opcode: Opcode)
counter_store_fast(address, opcode) :- 
            Statement_Opcode(address, opcode),
            OpcodeIs_STORE_FAST(opcode).

.decl counter_make_function(address: Statement, opcode: Opcode)
counter_make_function(address, opcode) :- 
            Statement_Opcode(address, opcode),
            OpcodeIs_MAKE_FUNCTION(opcode).

.decl counter_load_deref(address: Statement, opcode: Opcode)
counter_load_deref(address, opcode) :- 
            Statement_Opcode(address, opcode),
            OpcodeIs_LOAD_DEREF(opcode).

.decl counter_inplace_add(address: Statement, opcode: Opcode)
counter_inplace_add(address, opcode) :- 
            Statement_Opcode(address, opcode),
            OpcodeIs_INPLACE_ADD(opcode).

.decl counter_store_deref(address: Statement, opcode: Opcode)
counter_store_deref(address, opcode) :- 
            Statement_Opcode(address, opcode),
            OpcodeIs_STORE_DEREF(opcode).

.decl counter_call_function(address: Statement, opcode: Opcode)
counter_call_function(address, opcode) :- 
            Statement_Opcode(address, opcode),
            OpcodeIs_CALL_FUNCTION(opcode).

.decl counter_store_name(address: Statement, opcode: Opcode)
counter_store_name(address, opcode) :- 
            Statement_Opcode(address, opcode),
            OpcodeIs_STORE_NAME(opcode).

.decl counter_load_build_class(address: Statement, opcode: Opcode)
counter_load_build_class(address, opcode) :- 
            Statement_Opcode(address, opcode),
            OpcodeIs_LOAD_BUILD_CLASS(opcode).

.decl counter_load_name(address: Statement, opcode: Opcode)
counter_load_name(address, opcode) :- 
            Statement_Opcode(address, opcode),
            OpcodeIs_LOAD_NAME(opcode).

//.decl counter(x:number)
//counter(c) :- c = count:{Statement_Opcode(_,"LOAD_CLOSURE"), Statement_Opcode(_,"BUILD_TUPLE")}.

//---------------------------------------------------------------------------------------//
// outputs to files //                           
.output counter_load_closure(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_LOAD_CLOSURE.csv", delimeter="\t")

.output counter_build_tuple(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_BUILD_TUPLE.csv", delimeter="\t")

.output counter_load_fast(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_LOAD_FAST.csv", delimeter="\t")

.output counter_load_const(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_LOAD_CONST.csv", delimeter="\t")

.output counter_binary_add(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_BINARY_ADD.csv", delimeter="\t")

.output counter_return_value(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_RETURN_VALUE.csv", delimeter="\t")

.output counter_store_fast(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_STORE_FAST.csv", delimeter="\t")

.output counter_make_function(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_MAKE_FUNCTION.csv", delimeter="\t")

.output counter_load_deref(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_LOAD_DEREF.csv", delimeter="\t")

.output counter_inplace_add(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_INPLACE_ADD.csv", delimeter="\t")

.output counter_store_deref(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_STORE_DEREF.csv", delimeter="\t")

.output counter_call_function(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_CALL_FUNCTION.csv", delimeter="\t")

.output counter_store_name(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_STORE_NAME.csv", delimeter="\t")

.output counter_load_build_class(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_LOAD_BUILD_CLASS.csv", delimeter="\t")

.output counter_load_name(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_LOAD_NAME.csv", delimeter="\t")

.output get_address_from_return_opcode(IO = "file", filename = "/Users/andretheuma/Documents/Andre/Andre's documents/School/UoM Computing Science/3RD Year/FYP/CS_Final_Year_Project/Python Bytecode Analyzer/analysis/OPCODE_RETURN_ADDRESSES.csv", delimeter="\t")

//.output counter_(IO = "file", filename = "Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_STORE_DEREF.csv", delimeter="\t")

//.output counter(IO = "file", filename = "Python Bytecode Analyzer/analysis/OPCODE_ANALYSIS_OPCODE_COUNTER.csv")
*/